"use strict";
exports.__esModule = true;
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importDefault(require("react"));
var connectField_1 = tslib_1.__importDefault(require("uniforms/connectField"));
var filterDOMProps_1 = tslib_1.__importDefault(require("uniforms/filterDOMProps"));
var DateConstructor = globalThis.Date;
var dateFormat = function (value) { return value && value.toISOString().slice(0, -8); };
var dateParse = function (timestamp, onChange) {
    var date = new DateConstructor(timestamp);
    if (date.getFullYear() < 10000) {
        onChange(date);
    }
    else if (isNaN(timestamp)) {
        onChange(undefined);
    }
};
var Date = function (_a) {
    var disabled = _a.disabled, id = _a.id, inputRef = _a.inputRef, label = _a.label, max = _a.max, min = _a.min, name = _a.name, onChange = _a.onChange, placeholder = _a.placeholder, value = _a.value, props = tslib_1.__rest(_a, ["disabled", "id", "inputRef", "label", "max", "min", "name", "onChange", "placeholder", "value"]);
    return (react_1["default"].createElement("div", tslib_1.__assign({}, filterDOMProps_1["default"](props)),
        label && react_1["default"].createElement("label", { htmlFor: id }, label),
        react_1["default"].createElement("input", { disabled: disabled, id: id, max: dateFormat(max), min: dateFormat(min), name: name, onChange: function (event) { return dateParse(event.target.valueAsNumber, onChange); }, placeholder: placeholder, ref: inputRef, type: "datetime-local", value: dateFormat(value) })));
};
exports["default"] = connectField_1["default"](Date);
