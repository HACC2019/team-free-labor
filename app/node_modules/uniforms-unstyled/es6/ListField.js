import { __rest } from "tslib";
import React, { Children } from 'react';
import { connectField, filterDOMProps, joinName } from 'uniforms';
import ListItemField from './ListItemField';
import ListAddField from './ListAddField';
const List = (_a) => {
    var { children, initialCount, itemProps, label, name, value } = _a, props = __rest(_a, ["children", "initialCount", "itemProps", "label", "name", "value"]);
    return (React.createElement("ul", Object.assign({}, filterDOMProps(props)),
        label && (React.createElement("label", null,
            label,
            React.createElement(ListAddField, { name: `${name}.$`, initialCount: initialCount }))),
        children
            ? value.map((item, index) => Children.map(children, child => React.cloneElement(child, {
                key: index,
                label: null,
                name: joinName(name, child.props.name && child.props.name.replace('$', index)),
            })))
            : value.map((item, index) => (React.createElement(ListItemField, Object.assign({ key: index, label: null, name: joinName(name, index) }, itemProps))))));
};
export default connectField(List, {
    ensureValue: false,
    includeInChain: false,
});
