import { __rest } from "tslib";
import React from 'react';
import { connectField, filterDOMProps } from 'uniforms';
const xor = (item, array) => {
    const index = array.indexOf(item);
    if (index === -1) {
        return array.concat([item]);
    }
    return array.slice(0, index).concat(array.slice(index + 1));
};
const renderCheckboxes = ({ allowedValues, disabled, fieldType, id, name, onChange, transform, value, }) => allowedValues.map(item => (React.createElement("div", { key: item },
    React.createElement("input", { checked: fieldType === Array ? value.includes(item) : value === item, disabled: disabled, id: `${id}-${item}`, name: name, onChange: () => onChange(fieldType === Array ? xor(item, value) : item), type: "checkbox" }),
    React.createElement("label", { htmlFor: `${id}-${item}` }, transform ? transform(item) : item))));
const renderSelect = ({ allowedValues, disabled, id, inputRef, label, name, onChange, placeholder, required, transform, value, }) => (React.createElement("select", { disabled: disabled, id: id, name: name, onChange: event => onChange(event.target.value !== '' ? event.target.value : undefined), ref: inputRef, value: value },
    (!!placeholder || !required || value === '') && (React.createElement("option", { value: "", disabled: required, hidden: required }, placeholder || label)),
    allowedValues.map(value => (React.createElement("option", { key: value, value: value }, transform ? transform(value) : value)))));
const Select = (_a) => {
    var { allowedValues, checkboxes, disabled, fieldType, id, inputRef, label, name, onChange, placeholder, required, transform, value } = _a, props = __rest(_a, ["allowedValues", "checkboxes", "disabled", "fieldType", "id", "inputRef", "label", "name", "onChange", "placeholder", "required", "transform", "value"]);
    return (React.createElement("div", Object.assign({}, filterDOMProps(props)),
        label && React.createElement("label", { htmlFor: id }, label),
        checkboxes || fieldType === Array
            ? renderCheckboxes({
                allowedValues,
                disabled,
                id,
                name,
                onChange,
                transform,
                value,
                fieldType,
            })
            : renderSelect({
                allowedValues,
                disabled,
                id,
                name,
                onChange,
                transform,
                value,
                inputRef,
                label,
                placeholder,
                required,
            })));
};
export default connectField(Select);
