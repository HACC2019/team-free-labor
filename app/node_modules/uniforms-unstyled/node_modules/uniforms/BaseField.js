"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var prop_types_1 = tslib_1.__importDefault(require("prop-types"));
var get_1 = tslib_1.__importDefault(require("lodash/get"));
var invariant_1 = tslib_1.__importDefault(require("invariant"));
var isEqual_1 = tslib_1.__importDefault(require("lodash/isEqual"));
var react_1 = require("react");
var BaseForm_1 = tslib_1.__importDefault(require("./BaseForm"));
var joinName_1 = tslib_1.__importDefault(require("./joinName"));
// Used for calculating labels and placeholders.
var flowingProp = function (prop, schema, state, fallback) {
    var propDisabled = prop === '' || prop === false;
    var propSet = prop !== undefined;
    var schemaDisabled = schema === '' || schema === false;
    var schemaValue = schema === true || schema === undefined ? fallback : schema;
    var stateDisabled = !state;
    var value = propDisabled || (!propSet && (schemaDisabled || stateDisabled))
        ? ''
        : propSet
            ? prop === true
                ? schemaDisabled
                    ? ''
                    : schemaValue
                : prop
            : schemaValue;
    return [value, schemaValue];
};
var BaseField = /** @class */ (function (_super) {
    tslib_1.__extends(BaseField, _super);
    function BaseField() {
        var _this = _super.apply(this, arguments) || this;
        invariant_1.default(_this.context.uniforms, '<%s /> must be rendered within a form.', 
        // @ts-ignore
        _this.constructor.displayName);
        _this.options = {
            ensureValue: true,
            explicitInitialValue: false,
            includeParent: false,
            overrideValue: false,
        };
        _this.randomId = _this.context.uniforms.randomId();
        _this.findValue = _this.findValue.bind(_this);
        _this.findField = _this.findField.bind(_this);
        _this.findError = _this.findError.bind(_this);
        return _this;
    }
    BaseField.prototype.getChildContext = function () {
        return {
            uniforms: {
                name: this.getChildContextName(),
                error: this.getChildContextError(),
                model: this.getChildContextModel(),
                state: this.getChildContextState(),
                schema: this.getChildContextSchema(),
                onChange: this.getChildContextOnChange(),
                onSubmit: this.getChildContextOnSubmit(),
                randomId: this.context.uniforms.randomId,
            },
        };
    };
    // eslint-disable-next-line complexity
    BaseField.prototype.shouldComponentUpdate = function (nextProps, _, _a) {
        var nextContext = _a.uniforms;
        var prevProps = this.props;
        var prevContext = this.context.uniforms;
        if (!isEqual_1.default(prevProps, nextProps)) {
            return true;
        }
        var _b = nextContext.state, nextMap = _b.changedMap, nextState = tslib_1.__rest(_b, ["changedMap"]);
        var _c = prevContext.state, prevMap = _c.changedMap, prevState = tslib_1.__rest(_c, ["changedMap"]);
        if (!isEqual_1.default(prevState, nextState)) {
            return true;
        }
        var prevName = joinName_1.default(prevContext.name, prevProps.name);
        var nextName = joinName_1.default(nextContext.name, nextProps.name);
        if (prevName !== nextName) {
            return true;
        }
        if (!isEqual_1.default(get_1.default(prevMap, prevName), get_1.default(nextMap, nextName))) {
            return true;
        }
        // Fields which are using parent props, need to be updated when parent value change
        if (this.options.includeParent && nextName.includes('.')) {
            var prevParentValue = get_1.default(prevContext.model, prevName.replace(/(.+)\..+$/, '$1'));
            var nextParentValue = get_1.default(nextContext.model, nextName.replace(/(.+)\..+$/, '$1'));
            if (!isEqual_1.default(prevParentValue, nextParentValue)) {
                return true;
            }
        }
        var prevValue = get_1.default(prevContext.model, prevName);
        var nextValue = get_1.default(nextContext.model, nextName);
        if (!isEqual_1.default(prevValue, nextValue)) {
            return true;
        }
        if (prevContext.error !== nextContext.error) {
            var prevError = prevContext.error &&
                prevContext.schema.getError(prevName, prevContext.error);
            var nextError = nextContext.error &&
                nextContext.schema.getError(nextName, nextContext.error);
            if (!isEqual_1.default(prevError, nextError)) {
                return true;
            }
            // Fields like List or Nest should update, whenever their children error has changed
            if (nextValue === Object(nextValue) && !(nextValue instanceof Date)) {
                return true;
            }
        }
        if (nextContext.schema !== prevContext.schema) {
            return true;
        }
        return false;
    };
    BaseField.prototype.getChildContextName = function () {
        return joinName_1.default(null, this.context.uniforms.name, this.props.name);
    };
    BaseField.prototype.getChildContextError = function () {
        return this.context.uniforms.error;
    };
    BaseField.prototype.getChildContextModel = function () {
        return this.context.uniforms.model;
    };
    BaseField.prototype.getChildContextState = function () {
        var state = this.context.uniforms.state;
        var props = this.props;
        var propagate = function (name) {
            return props[name] === undefined || props[name] === null
                ? state[name]
                : !!props[name];
        };
        return tslib_1.__assign(tslib_1.__assign({}, state), { label: propagate('label'), disabled: propagate('disabled'), placeholder: propagate('placeholder'), showInlineError: propagate('showInlineError') });
    };
    BaseField.prototype.getChildContextSchema = function () {
        return this.context.uniforms.schema;
    };
    BaseField.prototype.getChildContextOnChange = function () {
        return this.context.uniforms.onChange;
    };
    BaseField.prototype.getChildContextOnSubmit = function () {
        return this.context.uniforms.onSubmit;
    };
    // eslint-disable-next-line complexity
    BaseField.prototype.getFieldProps = function (name, options) {
        var context = this.context.uniforms;
        var props = this.props;
        var state = this.getChildContextState();
        options = Object.assign({}, this.options, options);
        if (name === undefined) {
            name = joinName_1.default(context.name, props.name);
        }
        var changed = !!get_1.default(context.state.changedMap, name);
        var error = context.schema.getError(name, context.error);
        var errorMessage = context.schema.getErrorMessage(name, context.error);
        var field = context.schema.getField(name);
        var fieldType = context.schema.getType(name);
        var fields = context.schema.getSubfields(name);
        var schemaProps = context.schema.getProps(name, tslib_1.__assign(tslib_1.__assign({}, state), props));
        var initialValue = options.explicitInitialValue
            ? context.schema.getInitialValue(name, props)
            : undefined;
        var parent = options.includeParent && name.indexOf('.') !== -1
            ? this.getFieldProps(name.replace(/(.+)\..+$/, '$1'), {
                includeParent: false,
            })
            : null;
        var _a = flowingProp(props.label, schemaProps.label, state.label, ''), label = _a[0], none = _a[1];
        var placeholder = flowingProp(props.placeholder, schemaProps.placeholder, state.placeholder, label || none)[0];
        var value;
        if (props.value === undefined || options.overrideValue) {
            value = get_1.default(context.model, name);
            if (value === undefined && !changed && !options.explicitInitialValue) {
                value = context.schema.getInitialValue(name, props);
            }
        }
        // This prevents (un)controlled input change warning.
        // More info: https://fb.me/react-controlled-components.
        if (value === undefined && options.ensureValue) {
            value = '';
        }
        return tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({ 
            // 0. Constant props.
            findError: this.findError, findField: this.findField, findValue: this.findValue, id: this.randomId }, state), { 
            // 2. Calculated field props.
            changed: changed,
            error: error,
            errorMessage: errorMessage,
            field: field,
            fieldType: fieldType,
            fields: fields, onChange: function (value, key) {
                if (key === void 0) { key = name; }
                return context.onChange(key, value);
            }, parent: parent,
            value: value }), (options.explicitInitialValue && { initialValue: initialValue })), schemaProps), props), ((options.explicitInitialValue || options.overrideValue) && { value: value })), { 
            // 6. Calculated _special_ field props.
            label: label,
            name: name,
            placeholder: placeholder });
    };
    BaseField.prototype.findError = function (name) {
        return this.context.uniforms.schema.getError(name, this.context.uniforms.error);
    };
    BaseField.prototype.findField = function (name) {
        return this.context.uniforms.schema.getField(name);
    };
    BaseField.prototype.findValue = function (name) {
        return get_1.default(this.context.uniforms.model, name);
    };
    BaseField.displayName = 'Field';
    BaseField.propTypes = {
        id: prop_types_1.default.string,
        name: prop_types_1.default.string.isRequired,
        disabled: prop_types_1.default.bool,
        label: prop_types_1.default.oneOfType([
            prop_types_1.default.bool,
            prop_types_1.default.string,
            prop_types_1.default.node,
        ]),
        placeholder: prop_types_1.default.oneOfType([prop_types_1.default.bool, prop_types_1.default.string]),
    };
    BaseField.contextTypes = BaseForm_1.default.childContextTypes;
    BaseField.childContextTypes = BaseForm_1.default.childContextTypes;
    return BaseField;
}(react_1.Component));
exports.default = BaseField;
