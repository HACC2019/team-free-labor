"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var invariant_1 = tslib_1.__importDefault(require("invariant"));
var Bridge = /** @class */ (function () {
    function Bridge() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        invariant_1.default(this.constructor !== Bridge, 'Bridge cannot be instantiated (args=%o).', { args: args });
    }
    Bridge.check = function (schema) {
        invariant_1.default(false, '%s have not implemented `check` method (args=%o).', this.name, { schema: schema });
    };
    Bridge.prototype.getError = function (name, error) {
        invariant_1.default(false, '%s have not implemented `getError` method (args=%o).', this.constructor.name, { name: name, error: error });
    };
    Bridge.prototype.getErrorMessage = function (name, error) {
        invariant_1.default(false, '%s have not implemented `getErrorMessage` method (args=%o).', this.constructor.name, { name: name, error: error });
    };
    Bridge.prototype.getErrorMessages = function (error) {
        invariant_1.default(false, '%s have not implemented `getErrorMessages` method (args=%o).', this.constructor.name, { error: error });
    };
    Bridge.prototype.getField = function (name) {
        invariant_1.default(false, '%s have not implemented `getField` method (args=%o).', this.constructor.name, { name: name });
    };
    Bridge.prototype.getInitialValue = function (name, props) {
        invariant_1.default(false, '%s have not implemented `getInitialValue` method (args=%o).', this.constructor.name, { name: name, props: props });
    };
    Bridge.prototype.getProps = function (name, props) {
        invariant_1.default(false, '%s have not implemented `getProps` method (args=%o).', this.constructor.name, { name: name, props: props });
    };
    Bridge.prototype.getSubfields = function (name) {
        invariant_1.default(false, '%s have not implemented `getSubfields` method (args=%o).', this.constructor.name, { name: name });
    };
    Bridge.prototype.getType = function (name) {
        invariant_1.default(false, '%s have not implemented `getType` method (args=%o).', this.constructor.name, { name: name });
    };
    Bridge.prototype.getValidator = function (options) {
        invariant_1.default(false, '%s have not implemented `getValidator` method (args=%o).', this.constructor.name, { options: options });
    };
    return Bridge;
}());
exports.default = Bridge;
