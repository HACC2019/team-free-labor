import invariant from 'invariant';
export default class Bridge {
    constructor(...args) {
        invariant(this.constructor !== Bridge, 'Bridge cannot be instantiated (args=%o).', { args });
    }
    static check(schema) {
        invariant(false, '%s have not implemented `check` method (args=%o).', this.name, { schema });
    }
    getError(name, error) {
        invariant(false, '%s have not implemented `getError` method (args=%o).', this.constructor.name, { name, error });
    }
    getErrorMessage(name, error) {
        invariant(false, '%s have not implemented `getErrorMessage` method (args=%o).', this.constructor.name, { name, error });
    }
    getErrorMessages(error) {
        invariant(false, '%s have not implemented `getErrorMessages` method (args=%o).', this.constructor.name, { error });
    }
    getField(name) {
        invariant(false, '%s have not implemented `getField` method (args=%o).', this.constructor.name, { name });
    }
    getInitialValue(name, props) {
        invariant(false, '%s have not implemented `getInitialValue` method (args=%o).', this.constructor.name, { name, props });
    }
    getProps(name, props) {
        invariant(false, '%s have not implemented `getProps` method (args=%o).', this.constructor.name, { name, props });
    }
    getSubfields(name) {
        invariant(false, '%s have not implemented `getSubfields` method (args=%o).', this.constructor.name, { name });
    }
    getType(name) {
        invariant(false, '%s have not implemented `getType` method (args=%o).', this.constructor.name, { name });
    }
    getValidator(options) {
        invariant(false, '%s have not implemented `getValidator` method (args=%o).', this.constructor.name, { options });
    }
}
