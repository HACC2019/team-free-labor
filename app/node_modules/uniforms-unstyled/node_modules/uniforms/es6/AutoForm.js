import * as PropTypes from 'prop-types';
import cloneDeep from 'lodash/cloneDeep';
import isEqual from 'lodash/isEqual';
import omit from 'lodash/omit';
import set from 'lodash/set';
import ValidatedQuickForm from './ValidatedQuickForm';
const Auto = (parent) => { var _a; return _a = class extends parent {
        constructor(...args) {
            super(...args);
            // @ts-ignore
            this.state = Object.assign(Object.assign({}, this.state), { model: this.props.model, modelSync: this.props.model });
        }
        componentWillReceiveProps({ model }) {
            // @ts-ignore
            super.componentWillReceiveProps(...arguments);
            if (!isEqual(this.props.model, model)) {
                this.setState(() => ({ model, modelSync: model }));
            }
        }
        getNativeFormProps() {
            return omit(super.getNativeFormProps(), ['onChangeModel']);
        }
        getModel(mode) {
            return mode === 'form' ? this.state.modelSync : this.state.model;
        }
        onChange(key, value) {
            const updateState = (state) => ({
                modelSync: set(cloneDeep(state.modelSync), key, value),
            });
            const updateModel = (state) => {
                if (this.props.onChangeModel) {
                    this.props.onChangeModel(state.modelSync);
                }
                return { model: state.modelSync };
            };
            // Before componentDidMount, every call to onChange should call BaseForm#onChange synchronously
            if (this.state.changed === null) {
                this.setState(updateState);
                super.onChange(key, value);
                this.setState(updateModel);
            }
            else {
                this.setState(updateState, () => {
                    super.onChange(key, value);
                    this.setState(updateModel);
                });
            }
        }
        __reset(state) {
            return Object.assign(Object.assign({}, super.__reset(state)), { model: this.props.model, modelSync: this.props.model });
        }
        onValidate() {
            // @ts-ignore
            return this.onValidateModel(this.getChildContextModel());
        }
    },
    _a.Auto = Auto,
    _a.displayName = `Auto${parent.displayName}`,
    _a.propTypes = Object.assign(Object.assign({}, parent.propTypes), { onChangeModel: PropTypes.func }),
    _a; };
export default Auto(ValidatedQuickForm);
