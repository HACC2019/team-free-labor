import { SyntheticEvent } from 'react';
import Bridge from './Bridge';
export declare type DeepPartial<T> = {
    [P in keyof T]?: DeepPartial<T[P]>;
};
export declare type ChangedMap<T> = T extends object ? {
    [P in keyof T]?: ChangedMap<T[P]>;
} : Record<string, void>;
export interface UniformsContext<Model extends object = Record<string, any>> {
    name: string[];
    error: any;
    model: DeepPartial<Model>;
    schema: Bridge;
    state: {
        changed: boolean;
        changedMap: ChangedMap<Model>;
        submitting: boolean;
        label: boolean;
        disabled: boolean;
        placeholder: boolean;
        [_: string]: unknown;
    };
    onChange(key: string, value: unknown): void;
    onSubmit(event?: SyntheticEvent): Promise<unknown>;
    randomId(): string;
}
declare const _default: import("react").Context<{
    uniforms: UniformsContext<Record<string, any>>;
}>;
export default _default;
