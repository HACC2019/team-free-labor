import PropTypes from 'prop-types';
import { Component } from 'react';
export declare const __childContextTypes: {
    name: PropTypes.Validator<(string | null)[]>;
    error: PropTypes.Requireable<object>;
    model: PropTypes.Validator<object>;
    schema: {
        getError: PropTypes.Validator<(...args: any[]) => any>;
        getErrorMessage: PropTypes.Validator<(...args: any[]) => any>;
        getErrorMessages: PropTypes.Validator<(...args: any[]) => any>;
        getField: PropTypes.Validator<(...args: any[]) => any>;
        getInitialValue: PropTypes.Validator<(...args: any[]) => any>;
        getProps: PropTypes.Validator<(...args: any[]) => any>;
        getSubfields: PropTypes.Validator<(...args: any[]) => any>;
        getType: PropTypes.Validator<(...args: any[]) => any>;
        getValidator: PropTypes.Validator<(...args: any[]) => any>;
    };
    state: {
        changed: PropTypes.Validator<boolean>;
        changedMap: PropTypes.Validator<object>;
        submitting: PropTypes.Validator<boolean>;
        label: PropTypes.Validator<boolean>;
        disabled: PropTypes.Validator<boolean>;
        placeholder: PropTypes.Validator<boolean>;
        showInlineError: PropTypes.Validator<boolean>;
    };
    onChange: PropTypes.Validator<(...args: any[]) => any>;
    onSubmit: PropTypes.Validator<(...args: any[]) => any>;
    randomId: PropTypes.Validator<(...args: any[]) => any>;
};
export declare const __childContextTypesBuild: (type: any) => any;
export default class BaseForm extends Component<any, any> {
    static displayName: string;
    static propTypes: {
        error: PropTypes.Requireable<object>;
        model: PropTypes.Requireable<object>;
        schema: PropTypes.Validator<any>;
        modelTransform: PropTypes.Requireable<(...args: any[]) => any>;
        onChange: PropTypes.Requireable<(...args: any[]) => any>;
        onSubmit: PropTypes.Requireable<(...args: any[]) => any>;
        onSubmitFailure: PropTypes.Requireable<(...args: any[]) => any>;
        onSubmitSuccess: PropTypes.Requireable<(...args: any[]) => any>;
        label: PropTypes.Requireable<boolean>;
        disabled: PropTypes.Requireable<boolean>;
        placeholder: PropTypes.Requireable<boolean>;
        showInlineError: PropTypes.Requireable<boolean>;
        autosave: PropTypes.Requireable<boolean>;
        autosaveDelay: PropTypes.Requireable<number>;
    };
    static childContextTypes: {
        uniforms: any;
    };
    static defaultProps: {
        model: {};
        label: boolean;
        autosave: boolean;
        autosaveDelay: number;
        noValidate: boolean;
    };
    constructor();
    getChildContext(): {
        uniforms: {
            name: never[];
            error: any;
            model: any;
            state: {
                changed: boolean;
                changedMap: any;
                submitting: any;
                label: boolean;
                disabled: boolean;
                placeholder: boolean;
                showInlineError: boolean;
            };
            schema: any;
            onChange: (key: any, value: any) => void;
            onSubmit: (event?: any) => any;
            randomId: any;
        };
    };
    componentWillMount(): void;
    componentWillReceiveProps({ schema }: any): void;
    componentWillUnmount(): void;
    delayId?: any;
    mounted: boolean;
    reset: () => void;
    change: (key: any, value: any) => void;
    submit: (event: any) => void;
    randomId: any;
    getChildContextName(): never[];
    getChildContextError(): any;
    getChildContextModel(): any;
    getChildContextState(): {
        changed: boolean;
        changedMap: any;
        submitting: any;
        label: boolean;
        disabled: boolean;
        placeholder: boolean;
        showInlineError: boolean;
    };
    getChildContextSchema(): any;
    getChildContextOnChange(): (key: any, value: any) => void;
    getChildContextOnSubmit(): (event?: any) => any;
    getModel(mode?: any): any;
    getChangedKeys(root: any, valueA: any, valueB: any): string[];
    getNativeFormProps(): Record<string, unknown>;
    onChange(key: any, value: any): void;
    __reset(state: any): {
        changed: boolean;
        changedMap: {};
        submitting: boolean;
        resetCount: any;
    };
    onReset(): void;
    onSubmit(event?: any): any;
    render(): JSX.Element;
}
