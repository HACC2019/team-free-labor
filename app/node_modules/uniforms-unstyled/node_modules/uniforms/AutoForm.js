"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var PropTypes = tslib_1.__importStar(require("prop-types"));
var cloneDeep_1 = tslib_1.__importDefault(require("lodash/cloneDeep"));
var isEqual_1 = tslib_1.__importDefault(require("lodash/isEqual"));
var omit_1 = tslib_1.__importDefault(require("lodash/omit"));
var set_1 = tslib_1.__importDefault(require("lodash/set"));
var ValidatedQuickForm_1 = tslib_1.__importDefault(require("./ValidatedQuickForm"));
var Auto = function (parent) { var _a; return _a = /** @class */ (function (_super) {
        tslib_1.__extends(class_1, _super);
        function class_1() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var _this = _super.apply(this, args) || this;
            // @ts-ignore
            _this.state = tslib_1.__assign(tslib_1.__assign({}, _this.state), { model: _this.props.model, modelSync: _this.props.model });
            return _this;
        }
        class_1.prototype.componentWillReceiveProps = function (_a) {
            var model = _a.model;
            // @ts-ignore
            _super.prototype.componentWillReceiveProps.apply(this, arguments);
            if (!isEqual_1.default(this.props.model, model)) {
                this.setState(function () { return ({ model: model, modelSync: model }); });
            }
        };
        class_1.prototype.getNativeFormProps = function () {
            return omit_1.default(_super.prototype.getNativeFormProps.call(this), ['onChangeModel']);
        };
        class_1.prototype.getModel = function (mode) {
            return mode === 'form' ? this.state.modelSync : this.state.model;
        };
        class_1.prototype.onChange = function (key, value) {
            var _this = this;
            var updateState = function (state) { return ({
                modelSync: set_1.default(cloneDeep_1.default(state.modelSync), key, value),
            }); };
            var updateModel = function (state) {
                if (_this.props.onChangeModel) {
                    _this.props.onChangeModel(state.modelSync);
                }
                return { model: state.modelSync };
            };
            // Before componentDidMount, every call to onChange should call BaseForm#onChange synchronously
            if (this.state.changed === null) {
                this.setState(updateState);
                _super.prototype.onChange.call(this, key, value);
                this.setState(updateModel);
            }
            else {
                this.setState(updateState, function () {
                    _super.prototype.onChange.call(_this, key, value);
                    _this.setState(updateModel);
                });
            }
        };
        class_1.prototype.__reset = function (state) {
            return tslib_1.__assign(tslib_1.__assign({}, _super.prototype.__reset.call(this, state)), { model: this.props.model, modelSync: this.props.model });
        };
        class_1.prototype.onValidate = function () {
            // @ts-ignore
            return this.onValidateModel(this.getChildContextModel());
        };
        return class_1;
    }(parent)),
    _a.Auto = Auto,
    _a.displayName = "Auto" + parent.displayName,
    _a.propTypes = tslib_1.__assign(tslib_1.__assign({}, parent.propTypes), { onChangeModel: PropTypes.func }),
    _a; };
exports.default = Auto(ValidatedQuickForm_1.default);
