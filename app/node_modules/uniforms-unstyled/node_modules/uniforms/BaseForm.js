"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var prop_types_1 = tslib_1.__importDefault(require("prop-types"));
var react_1 = tslib_1.__importStar(require("react"));
var cloneDeep_1 = tslib_1.__importDefault(require("lodash/cloneDeep"));
var get_1 = tslib_1.__importDefault(require("lodash/get"));
var isFunction_1 = tslib_1.__importDefault(require("lodash/isFunction"));
var isPlainObject_1 = tslib_1.__importDefault(require("lodash/isPlainObject"));
var mapValues_1 = tslib_1.__importDefault(require("lodash/mapValues"));
var omit_1 = tslib_1.__importDefault(require("lodash/omit"));
var set_1 = tslib_1.__importDefault(require("lodash/set"));
var randomIds_1 = tslib_1.__importDefault(require("./randomIds"));
var createSchemaBridge_1 = tslib_1.__importDefault(require("./createSchemaBridge"));
var changedKeys_1 = tslib_1.__importDefault(require("./changedKeys"));
exports.__childContextTypes = {
    name: prop_types_1.default.arrayOf(prop_types_1.default.string).isRequired,
    error: prop_types_1.default.object,
    model: prop_types_1.default.object.isRequired,
    schema: {
        getError: prop_types_1.default.func.isRequired,
        getErrorMessage: prop_types_1.default.func.isRequired,
        getErrorMessages: prop_types_1.default.func.isRequired,
        getField: prop_types_1.default.func.isRequired,
        getInitialValue: prop_types_1.default.func.isRequired,
        getProps: prop_types_1.default.func.isRequired,
        getSubfields: prop_types_1.default.func.isRequired,
        getType: prop_types_1.default.func.isRequired,
        getValidator: prop_types_1.default.func.isRequired,
    },
    state: {
        changed: prop_types_1.default.bool.isRequired,
        changedMap: prop_types_1.default.object.isRequired,
        submitting: prop_types_1.default.bool.isRequired,
        label: prop_types_1.default.bool.isRequired,
        disabled: prop_types_1.default.bool.isRequired,
        placeholder: prop_types_1.default.bool.isRequired,
        showInlineError: prop_types_1.default.bool.isRequired,
    },
    onChange: prop_types_1.default.func.isRequired,
    onSubmit: prop_types_1.default.func.isRequired,
    randomId: prop_types_1.default.func.isRequired,
};
exports.__childContextTypesBuild = function (type) {
    return isPlainObject_1.default(type)
        ? prop_types_1.default.shape(mapValues_1.default(type, exports.__childContextTypesBuild)).isRequired
        : type;
};
var BaseForm = /** @class */ (function (_super) {
    tslib_1.__extends(BaseForm, _super);
    function BaseForm() {
        var _this = _super.apply(this, arguments) || this;
        _this.state = {
            bridge: createSchemaBridge_1.default(_this.props.schema),
            changed: null,
            changedMap: {},
            resetCount: 0,
            submitting: false,
        };
        _this.mounted = false;
        _this.randomId = randomIds_1.default(_this.props.id);
        _this.onReset = _this.reset = _this.onReset.bind(_this);
        _this.onChange = _this.change = _this.onChange.bind(_this);
        _this.onSubmit = _this.submit = _this.onSubmit.bind(_this);
        // TODO: It shouldn't be here
        var getModel = _this.getModel.bind(_this);
        _this.getModel = function (mode, model) {
            if (mode === void 0) { mode = null; }
            if (model === void 0) { model = getModel(mode); }
            return mode !== null && _this.props.modelTransform
                ? _this.props.modelTransform(mode, model)
                : model;
        };
        return _this;
    }
    BaseForm.prototype.getChildContext = function () {
        return {
            uniforms: {
                name: this.getChildContextName(),
                error: this.getChildContextError(),
                model: this.getChildContextModel(),
                state: this.getChildContextState(),
                schema: this.getChildContextSchema(),
                onChange: this.getChildContextOnChange(),
                onSubmit: this.getChildContextOnSubmit(),
                randomId: this.randomId,
            },
        };
    };
    BaseForm.prototype.componentWillMount = function () {
        var _this = this;
        this.mounted = true;
        this.setState(function () { return ({}); }, function () { return _this.setState(function () { return ({ changed: false, changedMap: {} }); }); });
    };
    BaseForm.prototype.componentWillReceiveProps = function (_a) {
        var schema = _a.schema;
        if (this.props.schema !== schema) {
            this.setState(function () { return ({ bridge: createSchemaBridge_1.default(schema) }); });
        }
    };
    BaseForm.prototype.componentWillUnmount = function () {
        this.mounted = false;
    };
    BaseForm.prototype.getChildContextName = function () {
        return [];
    };
    BaseForm.prototype.getChildContextError = function () {
        return this.props.error;
    };
    BaseForm.prototype.getChildContextModel = function () {
        return this.getModel('form');
    };
    BaseForm.prototype.getChildContextState = function () {
        return {
            changed: !!this.state.changed,
            changedMap: this.state.changedMap,
            submitting: this.state.submitting,
            label: !!this.props.label,
            disabled: !!this.props.disabled,
            placeholder: !!this.props.placeholder,
            showInlineError: !!this.props.showInlineError,
        };
    };
    BaseForm.prototype.getChildContextSchema = function () {
        return this.state.bridge;
    };
    BaseForm.prototype.getChildContextOnChange = function () {
        return this.onChange;
    };
    BaseForm.prototype.getChildContextOnSubmit = function () {
        return this.onSubmit;
    };
    BaseForm.prototype.getModel = function (mode) {
        return this.props.model;
    };
    BaseForm.prototype.getChangedKeys = function (root, valueA, valueB) {
        return changedKeys_1.default(root, valueA, valueB);
    };
    BaseForm.prototype.getNativeFormProps = function () {
        var props = omit_1.default(this.props, [
            'autosave',
            'autosaveDelay',
            'disabled',
            'error',
            'label',
            'model',
            'modelTransform',
            'onChange',
            'onSubmit',
            'onSubmitFailure',
            'onSubmitSuccess',
            'placeholder',
            'schema',
            'showInlineError',
        ]);
        return tslib_1.__assign(tslib_1.__assign({}, props), { onSubmit: this.onSubmit, key: "reset-" + this.state.resetCount });
    };
    BaseForm.prototype.onChange = function (key, value) {
        var _this = this;
        // Do not set `changed` before componentDidMount
        if (this.state.changed !== null) {
            // @ts-ignore
            this.state.changed = true; // eslint-disable-line react/no-direct-mutation-state
            this.getChangedKeys(key, value, get_1.default(this.getModel(), key)).forEach(function (key) {
                return _this.setState(function (state) { return ({
                    changedMap: set_1.default(cloneDeep_1.default(state.changedMap), key, {}),
                }); });
            });
        }
        if (this.props.onChange) {
            this.props.onChange(key, value);
        }
        // Do not call `onSubmit` before componentDidMount
        if (this.state.changed !== null && this.props.autosave) {
            if (this.delayId) {
                this.delayId = clearTimeout(this.delayId);
            }
            if (this.props.autosaveDelay > 0) {
                this.delayId = setTimeout(this.onSubmit, this.props.autosaveDelay);
            }
            else {
                this.onSubmit();
            }
        }
    };
    BaseForm.prototype.__reset = function (state) {
        return {
            changed: false,
            changedMap: {},
            submitting: false,
            resetCount: state.resetCount + 1,
        };
    };
    BaseForm.prototype.onReset = function () {
        this.setState(this.__reset);
    };
    BaseForm.prototype.onSubmit = function (event) {
        var _this = this;
        if (event) {
            event.preventDefault();
            event.stopPropagation();
        }
        var result = this.props.onSubmit && this.props.onSubmit(this.getModel('submit'));
        // Set the `submitting` state only if onSubmit is async so we don't cause an unnecessary re-render
        var submitting;
        if (result && isFunction_1.default(result.then)) {
            this.setState({ submitting: true });
            submitting = result.finally(function () { return _this.setState({ submitting: false }); });
        }
        else {
            submitting = Promise.resolve(result);
        }
        return submitting.then(this.props.onSubmitSuccess, this.props.onSubmitFailure);
    };
    BaseForm.prototype.render = function () {
        return react_1.default.createElement("form", tslib_1.__assign({}, this.getNativeFormProps()));
    };
    BaseForm.displayName = 'Form';
    BaseForm.propTypes = {
        error: prop_types_1.default.object,
        model: prop_types_1.default.object,
        schema: prop_types_1.default.any.isRequired,
        modelTransform: prop_types_1.default.func,
        onChange: prop_types_1.default.func,
        onSubmit: prop_types_1.default.func,
        onSubmitFailure: prop_types_1.default.func,
        onSubmitSuccess: prop_types_1.default.func,
        label: prop_types_1.default.bool,
        disabled: prop_types_1.default.bool,
        placeholder: prop_types_1.default.bool,
        showInlineError: prop_types_1.default.bool,
        autosave: prop_types_1.default.bool,
        autosaveDelay: prop_types_1.default.number,
    };
    BaseForm.childContextTypes = {
        uniforms: exports.__childContextTypesBuild(exports.__childContextTypes),
    };
    BaseForm.defaultProps = {
        model: {},
        label: true,
        autosave: false,
        autosaveDelay: 0,
        noValidate: true,
    };
    return BaseForm;
}(react_1.Component));
exports.default = BaseForm;
