"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = require("react");
var BaseField_1 = tslib_1.__importDefault(require("./BaseField"));
var identity = function (x) { return x; };
function connectField(component, _a) {
    var _b = _a === void 0 ? {} : _a, _c = _b.baseField, baseField = _c === void 0 ? BaseField_1.default : _c, _d = _b.mapProps, mapProps = _d === void 0 ? identity : _d, ensureValue = _b.ensureValue, includeInChain = _b.includeInChain, includeParent = _b.includeParent, initialValue = _b.initialValue;
    var _e;
    return _e = /** @class */ (function (_super) {
            tslib_1.__extends(class_1, _super);
            function class_1() {
                var _this = _super.apply(this, arguments) || this;
                _this.options.includeInChain =
                    includeInChain === undefined ? true : includeInChain;
                _this.options.initialValue =
                    initialValue === undefined ? true : initialValue;
                if (ensureValue !== undefined)
                    _this.options.ensureValue = ensureValue;
                if (includeParent !== undefined)
                    _this.options.includeParent = includeParent;
                return _this;
            }
            class_1.prototype.getChildContextName = function () {
                return this.options.includeInChain
                    ? _super.prototype.getChildContextName.call(this)
                    : this.context.uniforms.name;
            };
            class_1.prototype.componentWillMount = function () {
                if (this.options.initialValue) {
                    var props = this.getFieldProps(undefined, {
                        ensureValue: false,
                        explicitInitialValue: true,
                        includeParent: false,
                    });
                    // https://github.com/vazco/uniforms/issues/52
                    // If field is initially rendered with value, we treat it as an initial value.
                    if (this.props.value !== undefined &&
                        this.props.value !== props.value) {
                        props.onChange(this.props.value);
                        return;
                    }
                    if (props.required &&
                        props.initialValue !== undefined &&
                        props.value === undefined) {
                        props.onChange(props.initialValue);
                    }
                }
            };
            class_1.prototype.render = function () {
                return react_1.createElement(component, mapProps(this.getFieldProps()));
            };
            return class_1;
        }(baseField)),
        _e.displayName = "" + (component.displayName ||
            component.name) + (baseField.displayName || baseField.name),
        _e;
}
exports.default = connectField;
